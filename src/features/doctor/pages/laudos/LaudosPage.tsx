import { useEffect, useMemo, useState, useCallback } from "react"; // 1. Importe o useCallback
import { useNavigate } from "react-router-dom";
import {
Â  Search,
Â  Stethoscope,
Â  CalendarDays,
Â  FileText,
Â  RefreshCw,
Â  Filter,
Â  X,
Â  Pencil,
Â  Eye,
Â  Trash2,
} from "lucide-react";

import { listarLaudos, getHeaders, Report, excluirLaudo } from '@/lib/pacientesService';
import "./LaudosPage.css";

// Tipagem do laudo (Mantida como vocÃª definiu, embora 'Report' seja importado)
export type Laudo = {
Â  id: string;
Â  patient_id?: string | null;
Â  patient_name?: string | null;
Â  order_number?: string | null;
Â  exam?: string | null;
Â  diagnosis?: string | null;
Â  conclusion?: string | null;
Â  cid_code?: string | null;
Â  content_html?: string | null;
Â  content_json?: unknown;
Â  status?: "draft" | "pending" | "signed" | string | null;
Â  requested_by?: string | null;
Â  due_at?: string | null;
Â  hide_date?: boolean | null;
Â  hide_signature?: boolean | null;
Â  created_at?: string | null;
Â  updated_at?: string | null;
Â  created_by?: string | null;
};

/* =========================
Â  Â Helpers
========================= */
function formatarData(iso?: string | null) {
Â  if (!iso) return "-";
Â  const d = new Date(iso);
Â  return new Intl.DateTimeFormat("pt-BR", { dateStyle: "short" }).format(d);
}

function avaliarStatus(iso?: string | null) {
Â  if (!iso) return <span className="status-pill status-draft">Rascunho</span>;
Â  const hoje = new Date();
Â  hoje.setHours(0, 0, 0, 0);
Â  const prazo = new Date(iso);
Â  prazo.setHours(0, 0, 0, 0);
Â  if (prazo >= hoje) {
Â  Â  return <span className="status-pill status-ok">Dentro do prazo</span>;
Â  }
Â  return <span className="status-pill status-late">Vencido</span>;
}

export default function LaudosPage() {
Â  const nav = useNavigate();
Â  const [laudos, setLaudos] = useState<Report[]>([]); // Usando 'Report' importado
Â  const [loading, setLoading] = useState(true);
Â  const [q, setQ] = useState<string>("");
Â  const [error, setError] = useState<string | null>(null);
Â  const [showFilters, setShowFilters] = useState(false);
Â  const [status, setStatus] = useState<string>("");
Â  const [patientId, setPatientId] = useState<string>("");
  const [createdBy, setCreatedBy] = useState<string>("");

Â  /* =========================
Â  Â  Â Fetchers (Corrigido com useCallback)
Â  ========================= */
Â  const carregar = useCallback(async () => {
Â  Â  try {
Â  Â  Â  setLoading(true);
Â  Â  Â  setError(null);

Â  Â  Â  // Usa os estados 'status' e 'patientId' para filtrar
Â  Â  Â  const data = await listarLaudos({
Â  Â  Â  Â  status: status,
Â  Â  Â  Â  patient_id: patientId,
        created_by: createdBy,
Â  Â  Â  });

Â  Â  Â  setLaudos(data);
Â  Â  } catch (e: any) {
Â  Â  Â  console.error("[LaudosPage] Falha ao carregar laudos:", e);
Â  Â  Â  setError(e?.message || "Erro ao carregar laudos");
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  }, [status, patientId, createdBy]); // 2. DependÃªncias do useCallback

Â  // 3. useEffect para carregar na montagem e quando os filtros mudam
    useEffect(() => {
    carregar();
  }, [carregar]);

Â  /* =========================
Â  Â  Â AÃ§Ãµes
Â  ========================= */
Â  function handleEditar(id: string) {
Â  Â  nav(`/doctor/laudos/${id}/editar`);
Â  }

Â  function handleRevisar(id: string) {
Â  Â  nav(`/doctor/laudos/${id}/revisar`);
Â  }

async function handleDeletar(id: string) {
Â  const ok = window.confirm("Tem certeza que deseja deletar este laudo?");
Â  if (!ok) return;

Â  try {
    setLoading(true); // Opcional: Mostrar loading durante a exclusÃ£o
    setError(null);

Â  Â  await excluirLaudo(id); // <--- Usa a funÃ§Ã£o do service

    alert('Laudo excluÃ­do com sucesso!'); // Feedback para o utilizador

Â  Â  // Atualiza a lista chamando a funÃ§Ã£o 'carregar' memorizada
Â  Â  await carregar(); // <--- Recarrega a lista de laudos

Â  } catch (e: any) {
Â  Â  console.error("[LaudosPage] Falha ao deletar laudo:", e);
Â  Â  setError(`Erro ao deletar: ${e?.message || "desconhecido"}`); // Mostra o erro na UI
    alert(`Erro ao deletar: ${e?.message || "desconhecido"}`); // MantÃ©m o alert se preferir
Â  } finally {
    setLoading(false); // Garante que o loading para, mesmo se houver erro
  }
}

Â  /* =========================
Â  Â  Â Filtro local
Â  ========================= */
Â  const filtrados = useMemo(() => {
Â  Â  const s = q.trim().toLowerCase();
Â  Â  if (!s) return laudos;
Â  Â  return laudos.filter((l) => {
Â  Â  Â  const paciente = (l as any).patient_name || l.patient_id || "";
Â  Â  Â  const exame = l.exam || "";
Â  Â  Â  const ordem = l.order_number || "";
Â  Â  Â  const st = l.status || "";
Â  Â  Â  return `${paciente} ${exame} ${ordem} ${st}`.toLowerCase().includes(s);
Â  Â  });
Â  }, [q, laudos]);

Â  /* =========================
Â  Â  Â UI
Â  ========================= */
Â  return (
Â  Â  <>
Â  Â  Â  <header className="doctor-header">
Â  Â  Â  Â  <div className="doctor-header__inner">
Â  Â  Â  Â  Â  <div className="doctor-header__brand">
Â  Â  Â  Â  Â  Â  <div className="brand-icon">
Â  Â  Â  Â  Â  Â  Â  <div className="brand-icon__inner">
Â  Â  Â  Â  Â  Â  Â  Â  <Stethoscope className="brand-icon__svg" />
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <span className="brand-name">Medconnect</span>
Â  Â  Â  Â  Â  Â  <h1 className="doctor-greeting">
Â  Â  Â  Â  Â  Â  Â  OlÃ¡, Dr(a). <span className="highlight">Camilla Millene</span> ðŸ‘‹
Â  Â  Â  Â  Â  Â  </h1>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <div className="doctor-header__search">
Â  Â  Â  Â  Â  Â  <div className="search-wrapper">
Â  Â  Â  Â  Â  Â  Â  <Search className="search-icon" />
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  name="q"
Â  Â  Â  Â  Â  Â  Â  Â  autoComplete="off"
Â  Â  Â  Â  Â  Â  Â  Â  value={q}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setQ(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Buscar paciente, exame, laudoâ€¦"
Â  Â  Â  Â  Â  Â  Â  Â  className="search-input"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <nav className="doctor-header__nav">
Â  Â  Â  Â  Â  Â  <button onClick={() => nav("/doctor/dashboard")} className="nav-link">
Â  Â  Â  Â  Â  Â  Â  InÃ­cio
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  <button onClick={() => nav("/doctor/laudos")} className="nav-link active">
Â  Â  Â  Â  Â  Â  Â  Laudos
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  <a href="#" className="nav-link">
Â  Â  Â  Â  Â  Â  Â  Gerenciamento de Pacientes
Â  Â  Â  Â  Â  Â  </a>
Â  Â  Â  Â  Â  </nav>
Â  Â  Â  Â  </div>
Â  Â  Â  </header>

Â  Â  Â  <div className="laudos-page">
Â  Â  Â  Â  <div className="laudos-toolbar">
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={() => nav("/doctor/laudos/novo")}
Â  Â  Â  Â  Â  Â  className="btn btn-primary"
Â  Â  Â  Â  Â  Â  title="Novo Laudo"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <FileText className="h-4 w-4" />
Â  Â  Â  Â  Â  Â  <span> Novo Laudo</span>
Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  <div className="toolbar-filters">
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  className="btn btn-ghost"
Â  Â  Â  Â  Â  Â  Â  onClick={() => setShowFilters((v) => !v)}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <Filter className="h-4 w-4" />
Â  Â  Â  Â  Â  Â  Â  <span>Filtros</span>
Â  Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  Â  {showFilters && (
Â  Â  Â  Â  Â  Â  Â  <div className="filters-popover">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="filters-row">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <label className="filters-label">Status</label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="filters-input"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={status}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setStatus(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="">Todos</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="draft">Rascunho</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="pending">Pendente</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="signed">Assinado</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  Â  </div>

            <div className="filters-row">
              <label className="filters-label">Criado Por (ID)</label>
              <input
                className="filters-input"
                placeholder="UUID do usuÃ¡rio"
                value={createdBy}
                onChange={(e) => setCreatedBy(e.target.value)}
              />
            </div>

Â  Â  Â  Â  Â  Â  Â  Â  {/* O filtro "Criado Por" foi removido do JSX pois nÃ£o era usado */}

Â  Â  Â  Â  Â  Â  Â  Â  <div className="filters-actions">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <button className="btn btn-secondary" onClick={carregar} disabled={loading}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <RefreshCw className={`h-4 w-4 ${loading ? "animate-spin" : ""}`} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>Aplicar</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="btn btn-ghost"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setStatus("");
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setPatientId("");
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setShowFilters(false);
Â  Â  Â  Â  Â  Â  Â  Â  Â      setCreatedBy("");
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <X className="h-4 w-4" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>Limpar</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <div className="toolbar-actions">
Â  Â  Â  Â  Â  Â  <button className="btn btn-secondary" onClick={carregar} disabled={loading}>
Â  Â  Â  Â  Â  Â  Â  <RefreshCw className={`h-4 w-4 ${loading ? "animate-spin" : ""}`} />
Â  Â  Â  Â  Â  Â  Â  <span> Atualizar</span>
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {!loading && (
Â  Â  Â  Â  Â  Â  <div className="text-xs text-slate-400 ml-auto">{`Total: ${laudos.length}`}</div>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {error && (
Â  Â  Â  Â  Â  <div className="p-4 mb-4 rounded-md bg-red-50 text-red-700 border border-red-200 text-sm">
Â  Â  Â  Â  Â  Â  Erro ao carregar laudos: {error}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}

Â  Â  Â  Â  <div className="laudos-table-wrapper">
Â  Â  Â  Â  Â  <table className="laudos-table">
Â  Â  Â  Â  Â  Â  <thead>
Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  <th>Paciente</th>
Â  Â  Â  Â  Â  Â  Â  Â  <th>Exame</th>
Â  Â  Â  Â  Â  Â  Â  Â  <th>NÂº Pedido</th>
Â  Â  Â  Â  Â  Â  Â  Â  <th>Prazo</th>
Â  Â  Â  Â  Â  Â  Â  Â  <th>Status</th>
Â  Â  Â  Â  Â  Â  Â  Â  <th>AÃ§Ãµes</th>
Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  </thead>
Â  Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  Â  Â  {loading && (
Â  Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <td colSpan={6} className="p-6 text-center text-slate-500">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Carregando laudosâ€¦
Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  {!loading && filtrados.length === 0 && (
Â  Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <td colSpan={6} className="p-10 text-center text-slate-500 space-y-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-base">Nenhum laudo encontrado.</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-xs text-slate-400 max-w-xl mx-auto">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  PossÃ­veis causas: (1) Tabela <code>reports</code> vazia; (2) PolÃ­ticas RLS
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  bloqueando o usuÃ¡rio; (3) URL/Chave incorretas.
Â  Â  Â  Â  Â  Â  Â   Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center justify-center gap-3 mt-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button className="btn btn-secondary" onClick={carregar}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <RefreshCw className="h-4 w-4" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span> Tentar novamente</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  {!loading &&
Â  Â  Â  Â  Â  Â  Â  Â  filtrados.map((laudo) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr key={laudo.id}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>{(laudo as any).patient_name || laudo.patient_id || "-"}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>{laudo.exam || "-"}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>{laudo.order_number || "-"}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>{formatarData(laudo.due_at)}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <CalendarDays className="h-4 w-4 text-slate-400" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {avaliarStatus(laudo.due_at)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>
Â  Â  Â  Â  Â  Â  Â  Â  Â   Â  <div className="flex items-center gap-2 justify-end">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="btn btn-ghost"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  title="Editar laudo"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleEditar(laudo.id)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Pencil className="h-4 w-4" /><span className="sr-only">Editar</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="btn btn-secondary"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  title="Revisar laudo"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleRevisar(laudo.id)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Eye className="h-4 w-4" /><span className="sr-only">Revisar</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="btn btn-ghost text-red-600 hover:text-red-700"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  title="Deletar laudo"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleDeletar(laudo.id)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Trash2 className="h-4 w-4" /><span className="sr-only">Deletar</span>
 Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  </tbody>
Â  Â  Â  Â  Â  </table>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </>
Â  );
}